// <auto-generated />
using System;
using AllNotes.Domain.EF.AllNotesContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AllNotes.WebApi.Migrations
{
    [DbContext(typeof(AllNotesDbContext))]
    [Migration("20200202161746_brismigration")]
    partial class brismigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AllNotes.Domain.Models.Memo.CheckBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("CheckBoxes");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Memo.CheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("CheckLists");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Memo.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Sport.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Sport.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Sport.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Repeats")
                        .HasColumnType("int");

                    b.Property<int>("Weights")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Memo.CheckBox", b =>
                {
                    b.HasOne("AllNotes.Domain.Models.Memo.CheckList", "CheckList")
                        .WithMany("CheckBoxes")
                        .HasForeignKey("CheckListId");

                    b.HasOne("AllNotes.Domain.Models.Memo.Note", "Note")
                        .WithMany("CheckBoxes")
                        .HasForeignKey("NoteId");

                    b.HasOne("AllNotes.Domain.Models.Schedule", "Schedule")
                        .WithMany("CheckBoxes")
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Memo.CheckList", b =>
                {
                    b.HasOne("AllNotes.Domain.Models.Schedule", "Schedule")
                        .WithMany("CheckLists")
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Memo.Note", b =>
                {
                    b.HasOne("AllNotes.Domain.Models.Schedule", "Schedule")
                        .WithMany("Notes")
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Sport.Exercise", b =>
                {
                    b.HasOne("AllNotes.Domain.Models.Sport.Category", "Category")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllNotes.Domain.Models.Schedule", "Schedule")
                        .WithMany("Exercises")
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("AllNotes.Domain.Models.Sport.Series", b =>
                {
                    b.HasOne("AllNotes.Domain.Models.Sport.Exercise", "Exercise")
                        .WithMany("Series")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
